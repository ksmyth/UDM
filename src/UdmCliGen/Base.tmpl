#from common import *

namespace $impl_namespace$diagram_name
{
    public class UdmCliObject : global::${diagram_name}.IUdmCliObject
    {
        public global::Udm.Native.UdmObject backing;

        public UdmCliObject(global::Udm.Native.UdmObject o)
        {
            backing = o;
        }
        public UdmCliObject(global::Udm.Native.ObjectImpl o)
        {
            backing = new global::Udm.Native.UdmObject(o);
        }
        public static void CheckCast(global::Udm.Native.UdmObject a, global::Udm.Native.Uml.Class meta)
        {
            if (!global::Udm.Native.Udm.IsDerivedFrom(a.type(), meta))
            {
                throw new global::Udm.Native.UdmException("Invalid cast from type '" + a.type().name().Get() + "' to type '" + meta.name().Get() + "'");
            }
        }
        public int id
        {
            get { return backing.uniqueId(); }
        }
        public bool Equals(UdmCliObject that)
        {
            return this.id == that.id;
        }
        public override bool Equals(object that)
        {
            if (that as UdmCliObject != null)
            {
                return Equals((UdmCliObject)that);
            }
            return false;
        }
        public override int GetHashCode()
        {
            return id;
        }
        public string type_name
        {
            get { return backing.type().name().Get(); }
        }
        public global::Udm.Native.Uml.Class type
        {
            get { return backing.type(); }
        }
        public global::${diagram_name}.IUdmCliObject parent
        {
            get { return new UdmCliObject(backing.GetParent()); }
        }
        public bool isInstance
        {
            get { return backing.isInstance(); }
        }
        public bool isSubtype
        {
            get { return backing.isSubtype(); }
        }
        public global::${diagram_name}.IUdmCliObject archetype
        {
            get
            {
                global::Udm.Native.UdmObject o = backing.archetype();
                if (o.uniqueId() == 0) return null;
                return new UdmCliObject(o);
            }
        }
        public global::System.Collections.Generic.IEnumerable<global::${diagram_name}.IUdmCliObject> instances
        {
            get
            {
                return global::System.Linq.Enumerable.ToList(
                    global::System.Linq.Enumerable.Select<global::Udm.Native.UdmObject, global::${diagram_name}.IUdmCliObject>
                    (backing.instances(), o => new UdmCliObject(o)));
            }
        }
        public global::System.Collections.Generic.IEnumerable<global::${diagram_name}.IUdmCliObject> derived
        {
            get
            {
                return global::System.Linq.Enumerable.ToList(
                    global::System.Linq.Enumerable.Select<global::Udm.Native.UdmObject, global::${diagram_name}.IUdmCliObject>
                    (backing.derived(), o => new UdmCliObject(o)));
            }
        }
    }
}

namespace $diagram_name
{
    public interface IUdmCliObject
    {
        int id { get; }
## TODO: should be Class inherited from IUdmCliObject
        global::Udm.Native.Uml.Class type { get; }
        IUdmCliObject parent { get; }

        bool isInstance { get; }
        bool isSubtype { get; }
        IUdmCliObject archetype { get; }
        global::System.Collections.Generic.IEnumerable<IUdmCliObject> instances { get; }
        global::System.Collections.Generic.IEnumerable<IUdmCliObject> derived { get; }
    }
}
