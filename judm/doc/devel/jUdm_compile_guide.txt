jUdm_compile_guide.txt
The requirements and a step-by-step guide to compile jUdm source files
--------------------------------------------------------------------------------------------

Requirements:
-------------------
	J2SDK 1.4.2 (or later) as Java Runtime Environment 

Step-by-step guide:
-------------------------
	1. Setup UDM
		1.1 Download the UDM_NS sources from the VSS project
			From now on, I will use <udm_ns> to denote the root of the UDM_NS.
		1.2 Get UDM 3rd party files from \\atlantis\project\mobies\udm\udm_ns\udm_ns_3rdparty.zip
		1.3 ...
	
	2. Set the CLASSPATH environment variable
		2.1 Add <j2sdk_root>\jre\lib\rt.jar to the CLASSPATH
		2.2 Add <j2sdk_root>\lib\tools.jar  to the CLASSPATH
		2.3 Add '.', i.e., the current directory to the CLASSPATH
	
	3. Compile and build the UDM_NS solution
		follow the guidelines described in the "Udm_ns compile guide" to compile UDM_ns

	4. Set up ANT tool
	   Before running ant, some additional set up must be done:
		  - Add the bin directory to the PATH 
		  - Set the ANT_HOME environment variable to the directory 
		    where Ant is  installed (you can use the 3rdparty/ant directory)
		  - Set the JAVA_HOME environment variable to the directory 
		    where JDK (< 1.4.2) is installed
		  - Add the tools.jar to the classpath
		  - Add the %ANT_HOME%\lib to the classpath
		
		    Example: Windows OS
		             Ant is installed in c:\ant\
		
		             set ANT_HOME=c:\ant
		             set JAVA_HOME=c:\jdk1.4.2
		             set PATH=%PATH%;%ANT_HOME%\bin
		             set CLASSPATH=%CLASSPATH%;%JAVA_HOME%\lib\tools.jar;%ANT_HOME%\lib

	5. Open a command shell and go to the directory <udm_ns>\judm. 
		Using ANT you can run the following targets:

		5.1 ant rebuild
			Target “rebuild” re-initializes the build’s distribution environment 
			(<udm_ns>\judm\build\build_win) after completely removing any previous build
			from the disk, copies the necessary dll-s into this build directory, 
			updates, re-generates and compiles the swig and domain-specific source codes, 
			creates jar files (jUdm and other domain-specific jar files), updates batch files, and
			generates javadoc API documentation.

		5.2 ant build
			Target “build” re-initializes the build’s distribution environment 
			(<udm_ns>\judm\build\build_win), copies the necessary dll-s into this build directry, 
			compiles the swig and domain-specific source codes.
			This task requires the existence of the swig and domain-specific source codes, so you
			have to run either "rebuild" or "generate" task prior running this task.

		5.3 ant compile
			Target “compile” re-initializes the build’s distribution environment 
			(<udm_ns>\judm\build\build_win) by copying the necessary dll-s into this build directory 
			and compiling the swig and domain-specific source codes.
			This task does not update the source codes.
			This task requires the existence of the swig and domain-specific source codes, so you
			have to run either "rebuild" or "generate" task prior running this task.

		5.4 ant generate
			Target “generate” re-initializes the build’s distribution environment 
			(<udm_ns>\judm\build\build_win) by copying the necessary dll-s into this build directory, 
			and updating, re-generating the swig and domain-specific source codes.
			This task updates the source codes.
			

