jUdm_compile_guide.txt
The requirements and a step-by-step guide to compile jUdm source files
--------------------------------------------------------------------------------------------

Requirements:
-------------------
	J2SK 1.4.2 as Java Runtime Environment 

Step-by-step guide:
-------------------------
	1. Setup UDM
		1.1 Download the UDM_NS sources from the VSS project
			From now on, I will use <udm_ns> to denote the root of the UDM_NS.
		1.2 Get UDM 3rd party files
		1.3 ...
	
	2. Set the CLASSPATH envirnment variable
		2.1 Add the <j2sdk_root>\jre\lib\rt.jar to the CLASSPATH
		2.2 Add the '.', i.e., the current directory to the CLASSPATH

	3. Compile and build the UDM_NS solution
		3.1 Be sure that the UDM_PATH environment variable exits and is properly set
		3.1 Be sure that the UDM_3RDPARTY_BIN environment variable exits, is properly set, 
			and added to the PATH

	4. Add the ANT tool to the PATH: <udm_ns>\judm\lib\ant-1.6.2\bin

	5. Open a command shell and go to the directory <udm_ns>\judm. 
		Using ANT you can run the following targets:

		5.1 ant dist-all
			Target “dist-all” initializes the build’s distribution environment 
			(<udm_ns>\judm\build\build_win) after completely removing it from the disk, 
			copies the necessary dll-s into this build directry, 
			updates, re-generates, and compiles the swig and domain-specific source codes, 
			generates javadoc API documentation, and updates the domain-specific distribution 
			by generating the necessary jar files in <udm_ns>\judm\build\build_win\dist.

		5.2 ant dist
			Target “dist” re-initializes the build’s distribution environment 
			(<udm_ns>\judm\build\build_win), copies the necessary dll-s into this build directry, 
			updates and compiles the swig and domain-specific source codes, 
			updates javadoc API documentation, and updates the domain-specific distribution 
			by generating the necessary jar files in <udm_ns>\judm\build\build_win\dist.
			This task requires the existence of the swig and domain-specific source codes, so you
			have to run either "dist-all" or "compile-gen" tasks prior running this task.

		5.2 ant compile-gen
			Target “compile-gen” re-initializes the build’s distribution environment 
			(<udm_ns>\judm\build\build_win), copies the necessary dll-s into this build directry, 
			updates, re-generates, and compiles the swig and domain-specific source codes.
			This task does not update the <udm_ns>\judm\build\build_win\dist directory.

		5.2 ant compile
			Target “compile” re-initializes the build’s distribution environment 
			(<udm_ns>\judm\build\build_win), copies the necessary dll-s into this build directry, 
			and compiles the swig and domain-specific source codes.
			updates javadoc API documentation, and updates the domain-specific distribution 
			by generating the necessary jar files in <udm_ns>\judm\build\build_win\dist.
			This task does not update the <udm_ns>\judm\build\build_win\dist directory and
			does not re-generate the source files.
			This task requires the existence of the swig and domain-specific source codes, so you
			have to run "compile-gen" task prior running this task.