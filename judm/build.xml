<?xml version="1.0"?>
<project name="judm" basedir="." default="rebuild">
	<description>Java Wrapper for UDM</description>

	<condition property="isWindows">
		<os name="Windows XP" />
	</condition>

	<!-- Get the environment variables of UDM from Windows -->
	<target name="setenveclipse" if="isWindows">
		<echo> "Windows platform" </echo>
		<property environment="env" />
		<property name="udm.dir" location="${env.UDM_PATH}" />
		<property name="udm.bin.dir" location="${env.UDM_PATH}/bin" />
		<property name="udm.etc.dir" location="${env.UDM_PATH}/etc" />
		<property name="udm_3rdparty.dir" location="${env.UDM_3RDPARTY_PATH}" />
		<property name="build.dir" location="build/build_win" />
	</target>

	<!-- Get the environment variables of UDM from UNIX systems -->
	<target name="setenvlinux" unless="isWindows">
		<echo> "Linux platform" </echo>
		<property environment="env" />
		<property name="udm.dir" location="/usr" />
		<property name="udm.bin.dir" location="/usr" />
		<property name="udm.etc.dir" location="../etc/" />
		<property name="udm_3rdparty.dir" location="/usr" />
		<property name="build.dir" location="build/build_linux" />
	</target>

	<!-- Initialize directories and properties of the build -->
	<target name="init" depends="setenveclipse, setenvlinux" description="Initialize directories.">
		<tstamp />

		<!-- Directory of the compilation -->
		<property name="build_main.dir" location="build" />
		<property name="classes.dir" location="${build.dir}/classes" />
		<property name="java.build.dir" location="${build.dir}/classes/main" />

		<!-- Directory of the documentation -->
		<property name="doc.dir" location="doc" />

		<!-- Directory where the distribution goes -->
		<property name="dist.dir" location="${build.dir}/dist" />
		<property name="judm.dist.dir" location="${dist.dir}/judm" />

		<!-- Domain independent build products -->
		<property name="judm.dir" location="${build.dir}/judm" />
		<property name="judm.apidoc.dir" location="${judm.dir}/apidoc" />
		<property name="judm.bin.dir" location="${judm.dir}/bin" />
		<property name="judm.classes.dir" location="${judm.dir}/classes" />
		<property name="judm.meta.dir" location="${judm.dir}/meta" />

		<!-- jUdmHelper build products -->
		<property name="judmhelper.dir" location="${build.dir}/jUdmHelper" />
		<property name="judmhelper.dist.dir" location="${dist.dir}/jUdmHelper" />

		<!-- Helper classes -->
		<property name="util.src.dir" location="src/util" />

		<!-- Swig generated Java code -->
		<property name="udmswig.src.dir" location="src/UdmSwig" />

		<!-- Convenience wrapper for the Swig generated Java code -->
		<property name="udmswiglight.src.dir" location="src/UdmSwigLight" />

		<!-- jUdmHelper code -->
		<property name="judmhelper.src.dir" location="src/jUdmHelper" />
		<property name="judmhelper.classes.dir" location="${judmhelper.dir}/classes" />

		<!-- Directory of the batch files -->
		<property name="batch.dir" location="etc" />

		<!-- Classpath -->
		<path id="compile.classpath">
			<pathelement location="${judm.classes.dir}" />
			<pathelement location="${judmhelper.classes.dir}" />
			<fileset dir="${udm_3rdparty.dir}/junit">
				<include name="junit.jar" />
			</fileset>
		</path>
	</target>

	<!-- Clean all jUdm build products -->
	<target name="clean" depends="init" description="Clean all build products.">
		<delete dir="${build.dir}" />
	</target>

	<!-- Copy the DLLs in the directory of the distribution -->
	<target name="copy-dlls" depends="init" description="Copy DLLs to build dir for testing">
		<!-- Compile domain specific code for GeneTF -->
		<antcall target="copy-dlls-win"/>
		<antcall target="copy-dlls-linux"/>
	</target>

	<!-- Copy the Win DLLs in the directory of the distribution -->
	<target name="copy-dlls-win" if="isWindows" description="Copy DLLs to build dir for testing">
		
		<mkdir dir="${judm.dir}" />
		<mkdir dir="${judm.bin.dir}" />
		
		<copy todir="${judm.bin.dir}">
			<!-- Copy xerces in the directory of the distribution -->
			<fileset dir="${udm_3rdparty.dir}/xerces-c_2_5_0/bin">
				<include name="xerces*.dll" />
				<exclude name="*D.dll" />
			</fileset>
			<!-- Copy Udm executable and UdmCint DLL in the directory of the distribution -->
			<fileset dir="${udm.bin.dir}">
				<include name="Udm.exe" />
				<include name="UdmSwig.dll" />
			</fileset>
		</copy>
		
	</target>

	<!-- Copy the Linux SOs in the directory of the distribution -->
	<target name="copy-dlls-linux" unless="isWindows" description="Copy SOs to build dir for testing">

		<mkdir dir="${judm.dir}" />
		<mkdir dir="${judm.bin.dir}" />
		
		<copy todir="${judm.bin.dir}">
			<!-- Copy UdmSwig DLL in the directory of the distribution -->
			<fileset dir="${udm.dir}/lib">
				<include name="libUdmSwig.so" />
			</fileset>
		</copy>
		
	</target>

	<!-- Compile the source codes -->
	<target name="compile" depends="copy-dlls" description="Compile the code.">

		<!-- Compile the SWIG/UDM source codes -->
		<antcall target="judm-compile"/>

		<!-- Compile domain specific code for GeneTF -->
		<antcall target="ds-compile">
			<param name="dspackage" value="GeneTF" />
			<param name="dspackagelower" value="genetf" />
		</antcall>

		<!-- Compile domain specific code for GeneTRE-->
		<antcall target="ds-compile">
			<param name="dspackage" value="GeneTRE" />
			<param name="dspackagelower" value="genetre" />
		</antcall>

		<!-- Compile domain specific code for SBML2Ex-->
		<antcall target="ds-compile">
			<param name="dspackage" value="SBML2Ex" />
			<param name="dspackagelower" value="sbml2ex" />
		</antcall>
		
	</target>

	<!-- Compile the SWIG/UDM source codes -->
	<target name="judm-compile" description="Compile the SWIG/UDM source codes.">

		<!-- Create library for classes classes-->
		<mkdir dir="${judm.classes.dir}" />

		<!-- Compile util classes-->
		<javac srcdir="${util.src.dir}" destdir="${judm.classes.dir}" deprecation="false" debug="true" classpathref="compile.classpath" />
		
		<!-- Compile SWIG generated UdmCint classes-->
		<javac srcdir="${udmswig.src.dir}" destdir="${judm.classes.dir}" deprecation="false" debug="true" classpathref="compile.classpath" />

		<!-- Compile wrapper for the SWIG generated Java code classes (UdmCintLight)-->
		<javac srcdir="${udmswiglight.src.dir}" destdir="${judm.classes.dir}" deprecation="false" debug="true" classpathref="compile.classpath" />

	</target>

	<!-- Compile a domain specific package -->
	<target name="ds-compile" description="Compile a domain specific package">
		<fail unless="dspackage" message="Missing parameter: dspackage" />
		<fail unless="dspackagelower" message="Missing parameter: dspackagelower" />

		<!-- Create library for classes classes-->
		<mkdir dir="${build.dir}/${dspackage}/classes/main" />
		<mkdir dir="${build.dir}/${dspackage}/classes/test" />

		<!-- Compile the main classes -->
		<javac srcdir="samples/${dspackage}/src/main" destdir="${build.dir}/${dspackage}/classes/main" deprecation="false" debug="true" classpathref="compile.classpath" />

		<!-- Compile the test classes -->
		<javac srcdir="samples/${dspackage}/src/test" destdir="${build.dir}/${dspackage}/classes/test" deprecation="false" debug="true">
			<classpath>
				<path refid="compile.classpath" />
				<pathelement location="${build.dir}/${dspackage}/classes/main" />
			</classpath>
		</javac>

	</target>

	<!-- Generate the SWIG/UDM and domain-specific source codes -->
	<target name="generate" depends="copy-dlls" description="Generate the SWIG/UDM and domain-specific source codes.">
		
		<!-- Generate the SWIG/UDM source codes -->
		<antcall target="judm-generate"/>

		<!-- Generate the domain-specific sources from meta models -->
		<!-- GeneTF -->
		<antcall target="ds-generate">
			<param name="dspackage" value="GeneTF" />
			<param name="dspackagelower" value="genetf" />
			<param name="udm_options" value=" -j" />
		</antcall>
		<!-- GeneTRE -->
		<antcall target="ds-generate">
			<param name="dspackage" value="GeneTRE" />
			<param name="dspackagelower" value="genetre" />
			<param name="udm_options" value=" -j" />
		</antcall>
		<!-- SBML2Ex -->
		<antcall target="ds-generate">
			<param name="dspackage" value="SBML2Ex" />
			<param name="dspackagelower" value="sbml2ex" />
			<param name="udm_options" value=" -j -i jigcell -q jigcell -e -u math=http://www.w3.org/1998/Math/MathML -u sbml=http://www.sbml.org/sbml/level2 -u dbi=http://www.dbi.tju.edu/xmlns/dbi -u unigene=http://www.dbi.tju.edu/xmlns/unigene -u xhtml=http://www.w3.org/1999/xhtml -u jigcell=http://mpf.biol.vt.edu/ns -u bc=http://www.sbml.org/2001/ns/biocharon" />
		</antcall>

	</target>

	<!-- Generate the SWIG/UDM source codes -->
	<target name="judm-generate" description="Generate the SWIG/UDM source codes.">
		
		<!-- Modify the generated the SWIG/JNI interface -->
		<echo> "Modify the generated the SWIG/JNI interface." </echo>
		<!-- The generated UdmPseudoObject.java class must be modified by hand -->
		<!-- Replace every occurence of SWIGTYPE_p_vectorTUdmLong_t by VectorOfLongs -->
		<replace file="${udmswig.src.dir}/edu/vanderbilt/isis/udm/swig/UdmPseudoObject.java" token="SWIGTYPE_p_vectorTUdmLong_t" value="VectorOfLongs" />
		<!-- Replace every occurence of SWIGTYPE_p_vectorTdouble_t by VectorOfDoubles -->
		<replace file="${udmswig.src.dir}/edu/vanderbilt/isis/udm/swig/UdmPseudoObject.java" token="SWIGTYPE_p_vectorTdouble_t" value="VectorOfDoubles" />
		<!-- Replace every occurence of SWIGTYPE_p_vectorTcint_string_t by VectorOfStrings -->
		<replace file="${udmswig.src.dir}/edu/vanderbilt/isis/udm/swig/UdmPseudoObject.java" token="SWIGTYPE_p_vectorTcint_string_t" value="VectorOfStrings" />
		<!-- Replace every occurence of SWIGTYPE_p_vectorTbool_t by VectorOfBools -->
		<replace file="${udmswig.src.dir}/edu/vanderbilt/isis/udm/swig/UdmPseudoObject.java" token="SWIGTYPE_p_vectorTbool_t" value="VectorOfBools" />

	</target>

	<!-- Generate a domain specific package -->
	<target name="ds-generate" if="isWindows" description="Generate the domain specific package">
		<fail unless="dspackage" message="Missing parameter: dspackage" />
		<fail unless="dspackagelower" message="Missing parameter: dspackagelower" />
		<fail unless="udm_options" message="Missing parameter: udm_options" />

		<!-- Delete old generated files -->
		<delete>
			<fileset dir="samples/${dspackage}/meta">
				<filename name="*.xml" />
				<filename name="*.xsd" />
			</fileset>
		</delete>
		<delete dir="samples/${dspackage}/src/main/edu" />
		<delete dir="samples/${dspackage}/src/main/test" />

		<!-- Generate UDM XML from the XME XML file -->
		<exec dir="samples/${dspackage}/meta" executable="cmd">
			<arg line="/c ${udm.etc.dir}/xme2udmxml ${dspackage}_uml.xme ${dspackage}.mga " />
		</exec>
		
		<!-- Generate UDM XML from the XME XML file -->
		<echo> Run ${udm.dir}\bin\udm.exe ${dspackage}_udm.xml ${udm_options} </echo>
		<exec dir="samples/${dspackage}/meta" executable="cmd">
			<arg line="/c ${udm.dir}\bin\udm.exe ${dspackage}_udm.xml ${udm_options}" />
		</exec>
		
		<!-- Update source code -->
		<copy todir="samples/${dspackage}/src/main">
			<fileset dir="samples/${dspackage}/meta" casesensitive="no">
				<include name="**/*.java" />
				<include name="**/*.html" />
		</fileset>
		</copy>

		<!-- Delete intermediate files -->
		<delete dir="samples/${dspackage}/meta/edu" />
		<delete dir="samples/${dspackage}/meta/test" />
		
	</target>

	<!-- Update the build -->
	<target name="build" depends="compile" description="Update the build">
		
		<!-- Update the jUdm build -->
		<antcall target="judm-build"/>
		
		<!-- Update the GeneTF build -->
		<antcall target="ds-build">
			<param name="dspackage" value="GeneTF" />
			<param name="dspackagelower" value="genetf" />
		</antcall>
		
		<!-- Update the GeneTRE build -->
		<antcall target="ds-build">
			<param name="dspackage" value="GeneTRE" />
			<param name="dspackagelower" value="genetre" />
		</antcall>
		
		<!-- Update the SBML2Ex build -->
		<antcall target="ds-build">
			<param name="dspackage" value="SBML2Ex" />
			<param name="dspackagelower" value="sbml2ex" />
		</antcall>

	</target>

	<!-- Update the jUdm build -->
	<target name="judm-build" description="Update the jUdm build">
		
		<!-- Copy the jUnit to the build directory -->
		<copy todir="${judm.dir}" file="${udm_3rdparty.dir}/junit/junit.jar" />

		<!-- Copy the Uml.xsd to the build directory -->
		<copy todir="${judm.meta.dir}" file="${udm.etc.dir}/Uml.xsd" />

		<!-- Create judm.jar in the build directory -->
		<jar destfile="${judm.dir}/judm.jar" manifest="etc/Manifest.mf">
			<fileset dir="${judm.classes.dir}"/>
		</jar>
		
		<!-- Copy the Uml.xsd to the build directory -->
		<copy todir="${udm.bin.dir}" file="${judm.dir}/judm.jar" />

	</target>

	<!-- Update domain-specific builds -->
	<target name="ds-build" description="Update the ${dspackage} build">
		<!-- There is no easy way in Ant to convert a string to lowercase
		     but a lowercase name is necessary to specify the package name in 
		     the JAR manifest file below.
		     So we use this extra argument that must be the domain-specific package
		     name in lowercase. -->
		<fail unless="dspackage" message="Missing parameter: dspackage" />
		<fail unless="dspackagelower" message="Missing parameter: dspackagelower" />
		
		<!-- Copy all the XML sample files -->
		<copy todir="${build.dir}/${dspackage}/samples">
			<mapper type="flatten" />
			<fileset dir="samples/${dspackage}/samples" casesensitive="no">
				<include name="**/*.xml" />
			</fileset>
		</copy>
		
		<!-- Copy all the meta files -->
		<copy todir="${build.dir}/${dspackage}/meta">
			<fileset dir="samples/${dspackage}/meta" casesensitive="no">
				<include name="${dspackage}_udm.xml" />
				<include name="${dspackage}.xsd" />
				<include name="${dspackage}_uml.xme" />
				<include name="${dspackage}.jpg" />
			</fileset>
		</copy>

		<!-- Create domain specific jar file -->
		<jar destfile="${build.dir}/${dspackage}/${dspackage}.jar" manifest="samples/${dspackage}/etc/Manifest.mf">
			<fileset dir="${build.dir}/${dspackage}/classes/main" />
		</jar>
		
		<!-- Create domain specific test jar file -->
		<jar destfile="${build.dir}/${dspackage}/${dspackage}-test.jar">
			<fileset dir="${build.dir}/${dspackage}/classes/test" />
			<manifest>
				<attribute name="Main-Class" value="edu.vanderbilt.isis.${dspackagelower}.test.AllTests" />
				<attribute name="Class-Path" value="../judm/judm.jar ../judm/junit.jar ${dspackage}.jar" />
			</manifest>
		</jar>
		
		<!-- Copy the domain specific source  -->
		<mkdir dir="${build.dir}/${dspackage}/src/main/edu" />
		<copy todir="${build.dir}/${dspackage}/src/main/edu">
			<fileset dir="samples/${dspackage}/src/main/edu"/>
		</copy>
		
		<mkdir dir="${build.dir}/${dspackage}/src/test" />
		<copy todir="${build.dir}/${dspackage}/src/test">
			<fileset dir="samples/${dspackage}/src/test">
				<include name="**/*.java" />
				<include name="**/*.html" />
			</fileset>
		</copy>
		
		<!-- Copy the appropriate batch file in the build  -->
		<antcall target="set_up_batch_file_win"/>
		<antcall target="set_up_batch_file_linux"/>
		
		<!-- Delete intermediate files -->
		<delete dir="${build.dir}/${dspackage}/classes" />
		
		<!-- Update udm_ns Java samples  -->
		<delete dir="${udm.dir}/samples/Java/${dspackage}" />
		<mkdir dir="${udm.dir}/samples/Java/${dspackage}" />
		<copy todir="${udm.dir}/samples/Java/${dspackage}">
			<fileset dir="${build.dir}/${dspackage}">
				<include name="**/*.jar" />
				<include name="**/*.cmd" />
				<include name="**/*.sh" />
			</fileset>
		</copy>
		
	</target>
	
	<!-- Create the build -->
	<target name="rebuild" depends="clean,generate" description="Create the build">
		
		<!-- After generating the sources, call build to compile them -->
		<antcall target="build"/>
		
		<!-- Generate API documentation -->
		<antcall target="apidoc"/>
		
	</target>

	<!-- Generate API documentation -->
	<target name="apidoc" description="Generate API documentation">
		
		<!-- Generate Java UDM API documentation --> 
		<antcall target="judm-apidoc"/>
		
		<!-- Generate GeneTF API documentation --> 
		<antcall target="ds-apidoc">
			<param name="dspackage" value="GeneTF" />
		</antcall>
		
		<!-- Generate GeneTRE API documentation --> 
		<antcall target="ds-apidoc">
			<param name="dspackage" value="GeneTRE" />
		</antcall>
		
		<!-- Generate SBML2Ex API documentation --> 
		<antcall target="ds-apidoc">
			<param name="dspackage" value="SBML2Ex" />
		</antcall>
		
	</target>

	<!-- Generate Java UDM API documentation -->
	<target name="judm-apidoc" description="Generate Java UDM API documentation">
		
		<!-- Generate Java UDM API documentation --> 
		<delete dir="${judm.apidoc.dir}" />
		<mkdir dir="${judm.apidoc.dir}" />
		<javadoc failonerror="no" defaultexcludes="yes" useexternalfile="yes" verbose="no" destdir="${judm.apidoc.dir}" windowtitle="jUdm API">
			<fileset dir="${util.src.dir}" defaultexcludes="yes" />
			<fileset dir="${udmswig.src.dir}" defaultexcludes="yes" />
			<fileset dir="${udmswiglight.src.dir}" defaultexcludes="yes" />
		    <doctitle><![CDATA[<h1>jUdm API</h1>]]></doctitle>
		    <bottom><![CDATA[<i>Copyright &#169; Vanderbilt University, 2000-2005. All Rights Reserved.</i>]]></bottom>
		</javadoc> 
		
	</target>

	<!-- Generate a domain-specific API documentation -->
	<target name="ds-apidoc" description="Generate ${dspackage} API documentation">
		<fail unless="dspackage" message="Missing parameter: dspackage" />
		
		<!-- Create library for apidoc -->
		<delete dir="${build.dir}/${dspackage}/apidoc" />
		<mkdir dir="${build.dir}/${dspackage}/apidoc" />

		<!-- Generate a domain-specific API documentation --> 
		<javadoc failonerror="no" classpathref="compile.classpath" defaultexcludes="yes" useexternalfile="yes" verbose="no" destdir="${build.dir}/${dspackage}/apidoc" windowtitle="${dspackage} API">
			<fileset dir="${build.dir}/${dspackage}/src/main" defaultexcludes="yes"/>
			<fileset dir="${build.dir}/${dspackage}/src/test" defaultexcludes="yes"/>
		    <doctitle><![CDATA[<h1>${dspackage} API</h1>]]></doctitle>
		    <bottom><![CDATA[<i>Copyright &#169; Vanderbilt University, 2000-2005. All Rights Reserved.</i>]]></bottom>
		</javadoc> 
		
	</target>

	<!-- Set up batch file for running the tests in Windows -->	
	<target name="set_up_batch_file_win" if="isWindows">
		<copy todir="${build.dir}/${dspackage}" file="${batch.dir}/runtests.cmd" />
		<replace file="${build.dir}/${dspackage}/runtests.cmd" token="@DSPACKAGE@" value="${dspackage}" />
		<replace file="${build.dir}/${dspackage}/runtests.cmd" token="@DSPACKAGE_LOWER@" value="${dspackagelower}" />
	</target>

	<!-- Set up batch file for running the tests in UNIX systems -->	
	<target name="set_up_batch_file_linux" unless="isWindows">
		<copy todir="${build.dir}/${dspackage}" file="${batch.dir}/runtests.sh" />
		<replace file="${build.dir}/${dspackage}/runtests.sh" token="@DSPACKAGE@" value="${dspackage}" />
		<replace file="${build.dir}/${dspackage}/runtests.sh" token="@DSPACKAGE_LOWER@" value="${dspackagelower}" />
	</target>

	<!-- Run unit test on the distribution packages -->
	<target name="test" depends="compile" description="Run unit tests.">

		<!-- Directory where junit reports go -->
		<property name="build.reports.tests.dir" location="${build.dir}/report" />
		<mkdir dir="${build.reports.tests.dir}/xml" />
	
		<antcall target="ds-test">
			<param name="dspackage" value="GeneTF" />
		</antcall>

		<antcall target="ds-test">
			<param name="dspackage" value="GeneTRE" />
		</antcall>

		<antcall target="ds-test">
			<param name="dspackage" value="SBML2Ex" />
		</antcall>
		
		<mkdir dir="${build.reports.tests.dir}/html" />
		<junitreport todir="${build.reports.tests.dir}/html">
			<fileset dir="${build.reports.tests.dir}/xml">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${build.reports.tests.dir}/html" />
		</junitreport>
		
	</target>
		
	<!-- Run a batch test for a domain specific package -->
	<target name="ds-test" description="Run unit tests on ${dspackage}.">
		<echo> Test ${dspackage}... </echo>
		<fail unless="dspackage" message="Missing parameter: dspackage" />
		<!-- Copy the necessary xml files -->
		<copy todir="samples/">
			<fileset dir="samples/${dspackage}/samples">
				<include name="*.xml" />
			</fileset>
		</copy>
		
		<!-- Run junit tests -->
		<junit fork="yes" >
			<!-- This is necessary for System.load("UdmSwig") to succeed -->
			<jvmarg value="-Djava.library.path=${judm.dir}" />
			<!-- We need to add the dir containing the DLLs that UdmCint depends on
				to the PATH rather than java.library.path. Unfortunately they won't be
				loaded when they are not added. -->
			<env key="PATH" path="${judm.dir}"/>
			<classpath>
				<path refid="compile.classpath" />
				<pathelement location="${build.dir}/${dspackage}/classes/main" />
				<pathelement location="${build.dir}/${dspackage}/classes/test" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${build.reports.tests.dir}/xml">
				<fileset dir="${build.dir}/dist/${dspackage}/src/test">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<!-- Delete the intermediate xml files -->
		<delete>
			<fileset dir="samples/">
				<include name="*.xml" />
				<include name="*.txt" />
			</fileset>
		</delete>
	</target>

	<!-- Generate a domain specific package -->
	<target name="ns_test" depends="init" if="isWindows" description="Generate the domain specific package">
		<property name="dspackage" value="NS_TEST" />
		<property name="dspackagelower" value="ns_test" />
		<property name="udm_options" value=" -j" />

		<!-- Delete old generated files -->
		<delete>
			<fileset dir="samples/${dspackage}/meta">
				<filename name="*.xml" />
				<filename name="*.xsd" />
			</fileset>
		</delete>
		
		<!-- Delete source files -->
		<delete dir="samples/${dspackage}/src/main/edu" />

		<!-- Generate UDM XML from the XME XML file -->
		<!--exec dir="samples/${dspackage}/meta" executable="cmd">
			<arg line="/c ${udm.etc.dir}/xme2udmxml ${dspackage}_uml.xme ${dspackage}.mga " />
		</exec-->
		
		<!-- Generate UDM XML from the XME XML file -->
		<exec dir="samples/${dspackage}/meta" executable="cmd">
			<arg line="/c ${udm.dir}\bin\udm.exe ${dspackage}_udm.xml ${udm_options}" />
		</exec>
		
		<!-- Update source code -->
		<copy todir="samples/${dspackage}/src/main">
			<fileset dir="samples/${dspackage}/meta" casesensitive="no">
				<include name="**/*.java" />
				<include name="**/*.html" />
		</fileset>
		</copy>

		<!-- Delete intermediate files -->
		<delete dir="samples/${dspackage}/meta/edu" />
		<delete dir="samples/${dspackage}/meta/test" />
	</target>
	
</project>