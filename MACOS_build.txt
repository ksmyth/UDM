

General notice:
===============

- Only 32 bit version of UDM can be compiled on MAC OS X because there is no Xerces 64bit binary available for this platform and the source will not compile with 64bit arhictecture 
- Autoconf/automake are not used; Makefile.OSX will build UDM on MAC OS X platforms after updating the paths in 'section to be configured by the user' in Makefile.OSX.incl. This is a more straightforward approach. 
- XCODE, including the command line tools has to be downloaded from the AppStore, it is freely available.
- The build procedure was tested on: 
		
	OS X 10.9.1

	uname: 
	3.0.0 Darwin Kernel Version 13.0.0: Thu Sep 19 22:22:27 PDT 2013; root:xnu-2422.1.72~6/RELEASE_X86_64 x86_64

	CC --version:
	Apple LLVM version 5.0 (clang-500.2.79) (based on LLVM 3.3svn)
	Target: x86_64-apple-darwin13.0.0
	Thread model: posix

JAVA 6
======

OS X 10.9.1 comes with Java 1.7.0-45, which can not run a 32 bit JVM
Therefore, Java 1.6.0 for MAC OS has to be downloaded from here:

http://support.apple.com/downloads/DL1572/en_US/JavaForOSX2013-05.dmg

open in Finder, double click and install it.
This should install Java 1.6.0 JVM in: /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/bin/java

Check and if necessary edit the value of JVMD32 in Makefile.OSX.incl located in the top directory of UDM

ANT
===

Apache ANT is used for build the Java wrapper of UDM

1. Obtain apache-ant-1.9.3-bin.tar.bz2 from http://www.apache.org/dist/ant/binaries/apache-ant-1.9.3-bin.tar.bz2
2. Untar it in a directory where developer tools are (for instance: ~/devtools)
3. Set/change the value of ANT to the directory of ANT binary, located in top directory of UDM (example: ~/devtools/apache-ant-1.9.3/bin/ant)

JUNIT
=====

JUNIT is used for testing the Java wrapper of UDM
1. Obtain junit-4.11.jar from http://search.maven.org/remotecontent?filepath=junit/junit/4.11/junit-4.11.jar
2. Obtain junit-4.11-javadoc.jar from http://search.maven.org/remotecontent?filepath=junit/junit/4.11/junit-4.11-javadoc.jar 
2. Create a junit/ directory where developer tools are (for instance: ~/devtools) and copy the above two files in this directory
3. Set/change the value of JUNITDIR to the directory of JUNIT, located in top directory of UDM (example: ~/devtools/junit)

CPPUNIT
=======

1. Obtain cppunit-1.12.1.tar from: http://sourceforge.net/projects/cppunit/files/cppunit/1.12.1/cppunit-1.12.1.tar.gz/download?use_mirror=netcologne
2. Untar it in a directory where developer tools are (for instance: ~/devtools) and compile using the below commands:

cd cppunit-1.12.1; 
export CFLAGS="-g -O2 -arch i386"
export CXXFLAGS="$CFLAGS" 
./configure
make 
3. Set/change the value of CPPUNIT to the directory of CPPUNIT in Makefile.OSX.incl located in top directory of UDM (example:~/devtools/cppunit-1.12.1)
 
BOOST
=====

1. Obtain boost_1_55_0.tar.gz from http://sourceforge.net/projects/boost/files/boost/1.55.0/boost_1_55_0.tar.gz/download
2. Untar it in a directory where developer tools are (for instance: ~/devtools).
3. Most of the boost libraries are header only libraries, however we do need boost_python binary module which needs to be compiled.
	3.1 build bjam (a tool which is needed to build boost)

		cd boost_1_55_0/tools/build/v2/engine
		export CFLAGS="-g -O2 -arch i386"
		export CXXFLAGS="$CFLAGS" 
		./build.sh cc
	3.2 build boost (will be needed for UdmPython). If the Python wrapper for UDM will not be used, you can skip this section
		cd boost_1_55_0/
		tools/build/v2/engine/bin.macosxx86/bjam -sBUILD=release cxxflags="-g -O2 -arch i386" cflags="-g -O2 -arch i386" linkflags="-arch i386"


4. If build.sh will report 'operation not permitted', than the file was quarantined by Mac OS because it was downloaded from the internet. You can solve this by issuing xattr -dr com.apple.quarantine . in that directory.
5. Set/change the value of BOOST to the directory of BOOST in Makefile.OSX.incl located in top directory of UDM (example:~/devtools/boost_1_55_0)

JSON_SPIRIT
===========

1. Download Json Spirit from: http://www.codeproject.com/Articles/20027/JSON-Spirit-A-C-JSON-Parser-Generator-Implemented
2. copy the directory json_spirit_v4.06 to a directory where developer tools are (for instance ~/devtools)
3. set/change the value of JSON_SPIRIT to the directory of json_spirit_v4.06/json_spirit in Makefile.OSX.incl located in top directory of UDM (example: ~/devtools/json_spirit_v4.06/json_spirit)


MINIZIP
=======

1. Download Minizip from http://www.winimage.com/zLibDll/unzip101h.zip
2. Unzip it to a directory where developer tools are (for instance: ~/devtools/minizip)
3. Replace minizip/Makefile with the following:

-----------8><--------------------------------
CC=cc
CFLAGS=$(OPT) -I../.. -Dunix -fPIC -arch i386

.c.o:
        $(CC) -c $(CFLAGS) $*.c

all: libminizip

libminizip: unzip.o zip.o ioapi.o
        ar rcs libminizip.a unzip.o zip.o ioapi.o

clean:
        /bin/rm -f *.o *~ minizip miniunz *.so *.a
---------8><-----------------------------------
4. cd minizip; make 

PCCTS
=====

1. Download PCCTS 1.33 MR from http://www.polhode.com/pccts133mr.zip
2. Unzip it to a directory where developer tools are (like ~/devtools/pccts)
3. Add -D PCCTS_USE_STDARG to CFLAGS in sorcerer/lib/makefile:
	CFLAGS=$(COPT) -I../../h -I../h -D PCCTS_USE_STDARG
4. cd pccts; make
5. set/change the value of PCCTS to the directory of pccts in Makefile.OSX.incl located in top directory of UDM (example: ~/devtools/pccts)

